pipeline = [
  {
    $set: {
      // Basic customer information
      customer_id: fakeNumber(12),
      account_number: fakePaddedNumberAsText(14),
      created_date: fakeDateBeforeNow(7 * 365 * 24 * 60 * 60 * 1000), // Up to 7 years ago
      last_updated: fakeDateBeforeNow(24 * 60 * 60 * 1000), // Up to 1 day ago
      status: fakeValueFromList([
        "ACTIVE",
        "INACTIVE",
        "SUSPENDED",
        "PENDING_VERIFICATION",
        "CLOSED",
        "FROZEN",
      ]),
      priority_level: fakeValueFromList([
        "PLATINUM",
        "GOLD",
        "SILVER",
        "BRONZE",
        "STANDARD",
      ]),

      // Comprehensive personal information
      personal_info: {
        first_name: fakeFirstName(),
        last_name: fakeLastName(),
        middle_name: fakeFirstName(),
        full_name: fakeFirstAndLastName(),
        maiden_name: fakeLastName(),
        date_of_birth: fakeDateBeforeNow(85 * 365 * 24 * 60 * 60 * 1000),
        place_of_birth: { $concat: [fakeTownName(), ", ", fakeCountryName()] },
        ssn: fakePaddedNumberAsText(9),
        passport_number: fakePaddedNumberAsText(9),
        drivers_license: fakePaddedNumberAsText(8),
        phone_primary: fakePaddedNumberAsText(10),
        phone_secondary: fakePaddedNumberAsText(10),
        phone_work: fakePaddedNumberAsText(10),
        email_primary: fakeEmailAddress(12),
        email_secondary: fakeEmailAddress(10),
        email_work: fakeEmailAddress(15),
        preferred_contact: fakeValueFromList([
          "EMAIL",
          "PHONE",
          "MAIL",
          "SMS",
          "SECURE_MESSAGE",
        ]),
        language_preference: fakeValueFromList([
          "EN",
          "ES",
          "FR",
          "DE",
          "IT",
          "PT",
          "ZH",
          "JA",
          "KO",
          "AR",
          "RU",
          "HI",
        ]),
        marital_status: fakeValueFromList([
          "SINGLE",
          "MARRIED",
          "DIVORCED",
          "WIDOWED",
          "SEPARATED",
        ]),
        dependents: fakeNumberBounded(0, 5),
        education_level: fakeValueFromList([
          "HIGH_SCHOOL",
          "ASSOCIATES",
          "BACHELORS",
          "MASTERS",
          "DOCTORATE",
          "PROFESSIONAL",
        ]),
      },

      // Multiple addresses with detailed information
      addresses: [
        {
          type: "PRIMARY",
          street_number: fakeNumberBounded(1, 99999),
          street_name: fakeStreetName(),
          apartment: {
            $concat: ["Apt ", { $toString: fakeNumberBounded(1, 9999) }],
          },
          city: fakeTownName(),
          county: fakeTownName(),
          state: fakeValueFromList([
            "CA",
            "NY",
            "TX",
            "FL",
            "IL",
            "PA",
            "OH",
            "GA",
            "NC",
            "MI",
            "NJ",
            "VA",
            "WA",
            "AZ",
            "MA",
          ]),
          zip_code: fakeZipCode(),
          zip_plus_four: fakeNumber(4),
          country: fakeCountryName(),
          coordinates: fakeLocationWithCoordinates(),
          verified: fakeBoolean(),
          verification_date: fakeDateBeforeNow(365 * 24 * 60 * 60 * 1000),
          residence_type: fakeValueFromList([
            "OWNED",
            "RENTED",
            "FAMILY",
            "OTHER",
          ]),
          years_at_address: fakeNumberBounded(0, 30),
        },
        {
          type: "BILLING",
          street_number: fakeNumberBounded(1, 99999),
          street_name: fakeStreetName(),
          city: fakeTownName(),
          state: fakeValueFromList(["CA", "NY", "TX", "FL", "IL"]),
          zip_code: fakeZipCode(),
          country: fakeCountryName(),
          verified: fakeBoolean(),
        },
        {
          type: "MAILING",
          street_number: fakeNumberBounded(1, 99999),
          street_name: fakeStreetName(),
          city: fakeTownName(),
          state: fakeValueFromList(["WA", "OR", "NV", "AZ", "UT"]),
          zip_code: fakeZipCode(),
          country: fakeCountryName(),
          verified: fakeBoolean(),
        },
        {
          type: "PREVIOUS",
          street_number: fakeNumberBounded(1, 99999),
          street_name: fakeStreetName(),
          city: fakeTownName(),
          state: fakeValueFromList(["CO", "NM", "WY", "MT", "ID"]),
          zip_code: fakeZipCode(),
          country: fakeCountryName(),
          years_at_address: fakeNumberBounded(1, 10),
        },
      ],

      // Detailed employment information
      employment: {
        status: fakeValueFromList([
          "EMPLOYED",
          "UNEMPLOYED",
          "SELF_EMPLOYED",
          "RETIRED",
          "STUDENT",
          "DISABLED",
          "CONTRACTOR",
        ]),
        company_name: fakeCompanyName(),
        job_title: fakeValueFromList([
          "Senior Software Engineer",
          "Marketing Director",
          "Financial Analyst",
          "Operations Manager",
          "Sales Representative",
          "Project Manager",
          "Data Scientist",
          "Product Manager",
          "Business Analyst",
          "Consultant",
        ]),
        industry: fakeValueFromList([
          "Technology",
          "Healthcare",
          "Finance",
          "Education",
          "Manufacturing",
          "Retail",
          "Construction",
          "Transportation",
          "Government",
          "Non-profit",
          "Entertainment",
          "Agriculture",
          "Energy",
          "Real Estate",
          "Legal",
          "Consulting",
        ]),
        annual_income: fakeMoneyAmountDecimal(6),
        monthly_income: fakeMoneyAmountDecimal(5),
        employment_start_date: fakeDateBeforeNow(
          15 * 365 * 24 * 60 * 60 * 1000
        ),
        years_with_employer: fakeNumberBounded(0, 25),
        employment_type: fakeValueFromList([
          "FULL_TIME",
          "PART_TIME",
          "CONTRACT",
          "TEMPORARY",
          "SEASONAL",
        ]),
        work_address: {
          company_name: fakeCompanyName(),
          street_number: fakeNumberBounded(1, 99999),
          street_name: fakeStreetName(),
          suite: {
            $concat: ["Suite ", { $toString: fakeNumberBounded(100, 9999) }],
          },
          city: fakeTownName(),
          state: fakeValueFromList(["CA", "NY", "TX", "FL", "IL"]),
          zip_code: fakeZipCode(),
          country: fakeCountryName(),
          phone: fakePaddedNumberAsText(10),
        },
        previous_employers: [
          {
            company_name: fakeCompanyName(),
            job_title: fakeValueFromList([
              "Analyst",
              "Associate",
              "Coordinator",
              "Specialist",
            ]),
            start_date: fakeDateBeforeNow(20 * 365 * 24 * 60 * 60 * 1000),
            end_date: fakeDateBeforeNow(15 * 365 * 24 * 60 * 60 * 1000),
            reason_for_leaving: fakeValueFromList([
              "CAREER_ADVANCEMENT",
              "RELOCATION",
              "LAYOFF",
              "BETTER_OPPORTUNITY",
            ]),
          },
          {
            company_name: fakeCompanyName(),
            job_title: fakeValueFromList([
              "Junior Analyst",
              "Assistant",
              "Intern",
              "Entry Level",
            ]),
            start_date: fakeDateBeforeNow(25 * 365 * 24 * 60 * 60 * 1000),
            end_date: fakeDateBeforeNow(20 * 365 * 24 * 60 * 60 * 1000),
            reason_for_leaving: fakeValueFromList([
              "CAREER_ADVANCEMENT",
              "EDUCATION",
              "RELOCATION",
            ]),
          },
        ],
      },

      // Multiple financial accounts with extensive details
      financial_accounts: [
        {
          account_type: "CHECKING",
          account_number: fakePaddedNumberAsText(12),
          routing_number: fakePaddedNumberAsText(9),
          balance: fakeMoneyAmountDecimal(6),
          available_balance: fakeMoneyAmountDecimal(6),
          overdraft_limit: fakeMoneyAmountDecimal(4),
          interest_rate: fakeDecimal(),
          opened_date: fakeDateBeforeNow(5 * 365 * 24 * 60 * 60 * 1000),
          last_transaction_date: fakeDateBeforeNow(3 * 24 * 60 * 60 * 1000),
          monthly_fee: fakeMoneyAmountDecimal(2),
          minimum_balance: fakeMoneyAmountDecimal(3),
          average_daily_balance: fakeMoneyAmountDecimal(6),
          status: fakeValueFromList(["ACTIVE", "INACTIVE", "FROZEN", "CLOSED"]),
          features: fakeListOfSubDocs(3, [
            "ONLINE_BANKING",
            "MOBILE_DEPOSIT",
            "OVERDRAFT_PROTECTION",
            "BILL_PAY",
            "WIRE_TRANSFERS",
          ]),
        },
        {
          account_type: "SAVINGS",
          account_number: fakePaddedNumberAsText(12),
          routing_number: fakePaddedNumberAsText(9),
          balance: fakeMoneyAmountDecimal(7),
          interest_rate: fakeDecimalSignificantPlaces(4),
          opened_date: fakeDateBeforeNow(8 * 365 * 24 * 60 * 60 * 1000),
          last_transaction_date: fakeDateBeforeNow(30 * 24 * 60 * 60 * 1000),
          compound_frequency: fakeValueFromList([
            "DAILY",
            "MONTHLY",
            "QUARTERLY",
            "ANNUALLY",
          ]),
          minimum_balance: fakeMoneyAmountDecimal(4),
          average_daily_balance: fakeMoneyAmountDecimal(7),
          ytd_interest_earned: fakeMoneyAmountDecimal(3),
          status: fakeValueFromList(["ACTIVE", "INACTIVE", "CLOSED"]),
        },
        {
          account_type: "CREDIT",
          account_number: fakePaddedNumberAsText(16),
          credit_limit: fakeMoneyAmountDecimal(5),
          available_credit: fakeMoneyAmountDecimal(5),
          current_balance: fakeMoneyAmountDecimal(4),
          minimum_payment: fakeMoneyAmountDecimal(3),
          interest_rate: fakeDecimalSignificantPlaces(3),
          payment_due_date: fakeDateAfterNow(25 * 24 * 60 * 60 * 1000),
          last_payment_date: fakeDateBeforeNow(30 * 24 * 60 * 60 * 1000),
          last_payment_amount: fakeMoneyAmountDecimal(3),
          opened_date: fakeDateBeforeNow(4 * 365 * 24 * 60 * 60 * 1000),
          card_type: fakeValueFromList([
            "VISA",
            "MASTERCARD",
            "AMEX",
            "DISCOVER",
          ]),
          rewards_program: fakeValueFromList([
            "CASHBACK",
            "POINTS",
            "MILES",
            "NONE",
          ]),
          rewards_balance: fakeNumber(5),
          status: fakeValueFromList([
            "ACTIVE",
            "INACTIVE",
            "SUSPENDED",
            "CLOSED",
          ]),
        },
        {
          account_type: "INVESTMENT",
          account_number: fakePaddedNumberAsText(12),
          balance: fakeMoneyAmountDecimal(7),
          ytd_return: fakeDecimalSignificantPlaces(3),
          total_return: fakeDecimalSignificantPlaces(4),
          opened_date: fakeDateBeforeNow(6 * 365 * 24 * 60 * 60 * 1000),
          account_manager: fakeFirstAndLastName(),
          status: fakeValueFromList(["ACTIVE", "INACTIVE"]),
        },
      ],

      // Comprehensive credit information
      credit_info: {
        credit_score: fakeNumberBounded(300, 850),
        credit_bureau: fakeValueFromList(["EXPERIAN", "EQUIFAX", "TRANSUNION"]),
        last_updated: fakeDateBeforeNow(90 * 24 * 60 * 60 * 1000),
        credit_history_length: fakeNumberBounded(0, 35),
        number_of_accounts: fakeNumberBounded(1, 30),
        total_debt: fakeMoneyAmountDecimal(7),
        debt_to_income_ratio: fakeDecimalSignificantPlaces(3),
        payment_history: fakeValueFromList([
          "EXCELLENT",
          "GOOD",
          "FAIR",
          "POOR",
        ]),
        credit_utilization: fakeDecimalSignificantPlaces(3),
        recent_inquiries: fakeNumberBounded(0, 10),
        derogatory_marks: fakeNumberBounded(0, 5),
        oldest_account_age: fakeNumberBounded(1, 35),
        credit_mix: fakeValueFromList(["EXCELLENT", "GOOD", "FAIR", "POOR"]),
        public_records: fakeNumberBounded(0, 3),
      },

      // Extensive transaction history - 100 transactions
      recent_transactions: fakeListOfSubDocs(100, [
        {
          transaction_id: fakePaddedNumberAsText(15),
          date: fakeDateBeforeNow(180 * 24 * 60 * 60 * 1000),
          amount: fakeMoneyAmountDecimal(4),
          type: fakeValueFromList([
            "DEBIT",
            "CREDIT",
            "TRANSFER",
            "FEE",
            "INTEREST",
            "DIVIDEND",
            "WITHDRAWAL",
            "DEPOSIT",
          ]),
          category: fakeValueFromList([
            "GROCERIES",
            "GAS",
            "RESTAURANT",
            "SHOPPING",
            "UTILITIES",
            "RENT",
            "INSURANCE",
            "HEALTHCARE",
            "ENTERTAINMENT",
            "TRAVEL",
            "EDUCATION",
            "CHARITY",
            "AUTOMOTIVE",
            "HOME_IMPROVEMENT",
            "PERSONAL_CARE",
            "PROFESSIONAL_SERVICES",
          ]),
          merchant: fakeCompanyName(),
          merchant_category: fakeValueFromList([
            "RETAIL",
            "RESTAURANT",
            "GAS_STATION",
            "GROCERY",
            "PHARMACY",
            "HOTEL",
            "AIRLINE",
            "ONLINE",
            "SUBSCRIPTION",
          ]),
          description: {
            $concat: [
              fakeValueFromList([
                "Purchase at",
                "Payment to",
                "Transfer from",
                "Fee for",
                "Interest from",
                "Refund from",
              ]),
              " ",
              fakeCompanyName(),
            ],
          },
          location: {
            city: fakeTownName(),
            state: fakeValueFromList([
              "CA",
              "NY",
              "TX",
              "FL",
              "IL",
              "PA",
              "OH",
              "GA",
              "NC",
              "MI",
            ]),
            country: fakeCountryName(),
            coordinates: fakeLocationWithCoordinates(),
          },
          payment_method: fakeValueFromList([
            "DEBIT_CARD",
            "CREDIT_CARD",
            "ACH",
            "WIRE",
            "CHECK",
            "CASH",
            "MOBILE_PAY",
          ]),
          status: fakeValueFromList([
            "COMPLETED",
            "PENDING",
            "FAILED",
            "CANCELLED",
            "DISPUTED",
          ]),
          reference_number: fakePaddedNumberAsText(12),
        },
      ]),

      // Comprehensive investment portfolio
      investments: {
        total_portfolio_value: fakeMoneyAmountDecimal(8),
        cash_balance: fakeMoneyAmountDecimal(6),
        risk_tolerance: fakeValueFromList([
          "CONSERVATIVE",
          "MODERATE",
          "AGGRESSIVE",
          "VERY_AGGRESSIVE",
        ]),
        investment_goals: fakeListOfSubDocs(5, [
          "RETIREMENT",
          "EDUCATION",
          "HOME_PURCHASE",
          "WEALTH_BUILDING",
          "INCOME_GENERATION",
          "TAX_BENEFITS",
          "EMERGENCY_FUND",
        ]),
        time_horizon: fakeValueFromList([
          "SHORT_TERM",
          "MEDIUM_TERM",
          "LONG_TERM",
        ]),
        asset_allocation: {
          stocks_percentage: fakeNumberBounded(20, 80),
          bonds_percentage: fakeNumberBounded(10, 60),
          cash_percentage: fakeNumberBounded(5, 30),
          alternatives_percentage: fakeNumberBounded(0, 20),
        },
        holdings: [
          {
            asset_type: "STOCKS",
            symbol: fakeValueFromList([
              "AAPL",
              "GOOGL",
              "MSFT",
              "AMZN",
              "TSLA",
              "META",
              "NVDA",
              "NFLX",
              "AMD",
              "INTC",
              "CRM",
              "ORCL",
              "ADBE",
              "PYPL",
              "DIS",
            ]),
            company_name: fakeCompanyName(),
            shares: fakeNumberBounded(1, 2000),
            purchase_price: fakeMoneyAmountDecimal(3),
            current_price: fakeMoneyAmountDecimal(3),
            purchase_date: fakeDateBeforeNow(3 * 365 * 24 * 60 * 60 * 1000),
            market_value: fakeMoneyAmountDecimal(6),
            unrealized_gain_loss: fakeMoneyAmountDecimal(5),
            dividend_yield: fakeDecimalSignificantPlaces(2),
            sector: fakeValueFromList([
              "TECHNOLOGY",
              "HEALTHCARE",
              "FINANCIALS",
              "CONSUMER_DISCRETIONARY",
              "INDUSTRIALS",
            ]),
          },
          {
            asset_type: "BONDS",
            symbol: fakeValueFromList([
              "TLT",
              "IEF",
              "SHY",
              "LQD",
              "HYG",
              "EMB",
              "AGG",
              "BND",
              "VTEB",
              "MUB",
              "TIP",
              "SCHZ",
            ]),
            shares: fakeNumberBounded(10, 1000),
            purchase_price: fakeMoneyAmountDecimal(3),
            current_price: fakeMoneyAmountDecimal(3),
            purchase_date: fakeDateBeforeNow(4 * 365 * 24 * 60 * 60 * 1000),
            market_value: fakeMoneyAmountDecimal(6),
            unrealized_gain_loss: fakeMoneyAmountDecimal(4),
            yield: fakeDecimalSignificantPlaces(3),
            duration: fakeDecimalSignificantPlaces(2),
            maturity_date: fakeDateAfterNow(10 * 365 * 24 * 60 * 60 * 1000),
            credit_rating: fakeValueFromList([
              "AAA",
              "AA",
              "A",
              "BBB",
              "BB",
              "B",
            ]),
          },
          {
            asset_type: "MUTUAL_FUNDS",
            symbol: fakeValueFromList([
              "VTSAX",
              "VTIAX",
              "VBTLX",
              "VGTSX",
              "VTSMX",
              "VFINX",
              "VTIVX",
              "VTWSX",
              "VGSLX",
              "VTABX",
            ]),
            fund_name: {
              $concat: [
                fakeValueFromList([
                  "Growth",
                  "Value",
                  "Balanced",
                  "Income",
                  "International",
                ]),
                " Fund",
              ],
            },
            shares: fakeDecimalSignificantPlaces(4),
            purchase_price: fakeMoneyAmountDecimal(3),
            current_price: fakeMoneyAmountDecimal(3),
            purchase_date: fakeDateBeforeNow(5 * 365 * 24 * 60 * 60 * 1000),
            market_value: fakeMoneyAmountDecimal(6),
            unrealized_gain_loss: fakeMoneyAmountDecimal(5),
            expense_ratio: fakeDecimalSignificantPlaces(4),
            ytd_return: fakeDecimalSignificantPlaces(3),
            fund_category: fakeValueFromList([
              "LARGE_CAP",
              "MID_CAP",
              "SMALL_CAP",
              "INTERNATIONAL",
              "BOND",
              "BALANCED",
            ]),
          },
          {
            asset_type: "ETF",
            symbol: fakeValueFromList([
              "SPY",
              "QQQ",
              "IWM",
              "EFA",
              "EEM",
              "VTI",
              "VOO",
              "IEFA",
              "IEMG",
              "BND",
            ]),
            shares: fakeNumberBounded(1, 500),
            purchase_price: fakeMoneyAmountDecimal(3),
            current_price: fakeMoneyAmountDecimal(3),
            purchase_date: fakeDateBeforeNow(2 * 365 * 24 * 60 * 60 * 1000),
            market_value: fakeMoneyAmountDecimal(5),
            unrealized_gain_loss: fakeMoneyAmountDecimal(4),
            expense_ratio: fakeDecimalSignificantPlaces(4),
            dividend_yield: fakeDecimalSignificantPlaces(2),
          },
        ],
        performance_metrics: {
          ytd_return: fakeDecimalSignificantPlaces(3),
          one_year_return: fakeDecimalSignificantPlaces(3),
          three_year_return: fakeDecimalSignificantPlaces(3),
          five_year_return: fakeDecimalSignificantPlaces(3),
          inception_return: fakeDecimalSignificantPlaces(3),
          volatility: fakeDecimalSignificantPlaces(3),
          sharpe_ratio: fakeDecimalSignificantPlaces(2),
          max_drawdown: fakeDecimalSignificantPlaces(3),
        },
      },

      // Multiple insurance policies with comprehensive details
      insurance_policies: [
        {
          policy_type: "LIFE",
          policy_number: fakePaddedNumberAsText(12),
          carrier: fakeValueFromList([
            "State Farm",
            "Allstate",
            "Progressive",
            "GEICO",
            "Liberty Mutual",
            "Farmers",
            "USAA",
            "Nationwide",
            "American Family",
            "Travelers",
            "MetLife",
            "Prudential",
          ]),
          coverage_amount: fakeMoneyAmountDecimal(7),
          premium: fakeMoneyAmountDecimal(4),
          premium_frequency: fakeValueFromList([
            "MONTHLY",
            "QUARTERLY",
            "SEMI_ANNUALLY",
            "ANNUALLY",
          ]),
          effective_date: fakeDateBeforeNow(3 * 365 * 24 * 60 * 60 * 1000),
          expiration_date: fakeDateAfterNow(20 * 365 * 24 * 60 * 60 * 1000),
          policy_type_detail: fakeValueFromList([
            "TERM",
            "WHOLE",
            "UNIVERSAL",
            "VARIABLE",
          ]),
          beneficiaries: [
            {
              name: fakeFirstAndLastName(),
              relationship: fakeValueFromList([
                "SPOUSE",
                "CHILD",
                "PARENT",
                "SIBLING",
                "OTHER",
              ]),
              percentage: fakeNumberBounded(25, 100),
              contingent: fakeBoolean(),
            },
            {
              name: fakeFirstAndLastName(),
              relationship: fakeValueFromList([
                "SPOUSE",
                "CHILD",
                "PARENT",
                "SIBLING",
                "OTHER",
              ]),
              percentage: fakeNumberBounded(25, 75),
              contingent: fakeBoolean(),
            },
          ],
          cash_value: fakeMoneyAmountDecimal(5),
          loan_balance: fakeMoneyAmountDecimal(4),
          status: fakeValueFromList([
            "ACTIVE",
            "LAPSED",
            "CANCELLED",
            "PAID_UP",
          ]),
        },
        {
          policy_type: "AUTO",
          policy_number: fakePaddedNumberAsText(12),
          carrier: fakeValueFromList([
            "State Farm",
            "GEICO",
            "Progressive",
            "Allstate",
            "USAA",
            "Liberty Mutual",
          ]),
          coverage_amount: fakeMoneyAmountDecimal(6),
          deductible: fakeMoneyAmountDecimal(3),
          premium: fakeMoneyAmountDecimal(4),
          premium_frequency: fakeValueFromList([
            "MONTHLY",
            "SEMI_ANNUALLY",
            "ANNUALLY",
          ]),
          effective_date: fakeDateBeforeNow(2 * 365 * 24 * 60 * 60 * 1000),
          expiration_date: fakeDateAfterNow(365 * 24 * 60 * 60 * 1000),
          coverage_types: fakeListOfSubDocs(4, [
            "LIABILITY",
            "COLLISION",
            "COMPREHENSIVE",
            "UNINSURED_MOTORIST",
            "PERSONAL_INJURY",
          ]),
          vehicles: [
            {
              make: fakeValueFromList([
                "Toyota",
                "Honda",
                "Ford",
                "Chevrolet",
                "Nissan",
                "BMW",
                "Mercedes",
                "Audi",
                "Lexus",
                "Acura",
              ]),
              model: fakeValueFromList([
                "Camry",
                "Accord",
                "F-150",
                "Silverado",
                "Altima",
                "3 Series",
                "C-Class",
                "A4",
                "ES",
                "TLX",
              ]),
              year: fakeNumberBounded(2010, 2024),
              vin: fakePaddedNumberAsText(17),
              license_plate: {
                $concat: [fakeNAnyUpperChars(3), fakeNAnyUpperChars(4)],
              },
              usage: fakeValueFromList([
                "PERSONAL",
                "BUSINESS",
                "PLEASURE",
                "COMMUTE",
              ]),
              annual_mileage: fakeNumberBounded(5000, 25000),
              garage_location: fakeValueFromList([
                "GARAGE",
                "DRIVEWAY",
                "STREET",
                "PARKING_LOT",
              ]),
            },
            {
              make: fakeValueFromList([
                "Toyota",
                "Honda",
                "Ford",
                "Chevrolet",
                "Nissan",
              ]),
              model: fakeValueFromList([
                "Prius",
                "Civic",
                "Escape",
                "Equinox",
                "Rogue",
              ]),
              year: fakeNumberBounded(2015, 2024),
              vin: fakePaddedNumberAsText(17),
              license_plate: {
                $concat: [fakeNAnyUpperChars(3), fakeNAnyUpperChars(4)],
              },
              usage: fakeValueFromList(["PERSONAL", "COMMUTE"]),
              annual_mileage: fakeNumberBounded(8000, 20000),
            },
          ],
          claims_history: [
            {
              claim_number: fakePaddedNumberAsText(10),
              date: fakeDateBeforeNow(2 * 365 * 24 * 60 * 60 * 1000),
              type: fakeValueFromList([
                "COLLISION",
                "COMPREHENSIVE",
                "LIABILITY",
                "GLASS",
              ]),
              amount: fakeMoneyAmountDecimal(4),
              status: fakeValueFromList(["CLOSED", "OPEN", "DENIED"]),
              at_fault: fakeBoolean(),
            },
          ],
          status: fakeValueFromList(["ACTIVE", "LAPSED", "CANCELLED"]),
        },
        {
          policy_type: "HOME",
          policy_number: fakePaddedNumberAsText(12),
          carrier: fakeValueFromList([
            "State Farm",
            "Allstate",
            "Liberty Mutual",
            "Farmers",
            "USAA",
            "Travelers",
          ]),
          coverage_amount: fakeMoneyAmountDecimal(6),
          deductible: fakeMoneyAmountDecimal(3),
          premium: fakeMoneyAmountDecimal(4),
          premium_frequency: fakeValueFromList(["MONTHLY", "ANNUALLY"]),
          effective_date: fakeDateBeforeNow(4 * 365 * 24 * 60 * 60 * 1000),
          expiration_date: fakeDateAfterNow(365 * 24 * 60 * 60 * 1000),
          property_address: {
            street_number: fakeNumberBounded(1, 99999),
            street_name: fakeStreetName(),
            city: fakeTownName(),
            state: fakeValueFromList(["CA", "NY", "TX", "FL", "IL"]),
            zip_code: fakeZipCode(),
          },
          dwelling_coverage: fakeMoneyAmountDecimal(6),
          personal_property_coverage: fakeMoneyAmountDecimal(5),
          liability_coverage: fakeMoneyAmountDecimal(5),
          status: fakeValueFromList(["ACTIVE", "LAPSED", "CANCELLED"]),
        },
      ],

      // Comprehensive preferences and settings
      preferences: {
        communication: {
          email_notifications: fakeBoolean(),
          sms_notifications: fakeBoolean(),
          push_notifications: fakeBoolean(),
          phone_notifications: fakeBoolean(),
          mail_notifications: fakeBoolean(),
          marketing_emails: fakeBooleanWeighted(25),
          newsletter: fakeBooleanWeighted(35),
          promotional_offers: fakeBooleanWeighted(20),
          product_updates: fakeBooleanWeighted(60),
          security_alerts: fakeBooleanWeighted(95),
          preferred_time: fakeValueFromList([
            "MORNING",
            "AFTERNOON",
            "EVENING",
            "ANYTIME",
          ]),
          frequency: fakeValueFromList([
            "DAILY",
            "WEEKLY",
            "MONTHLY",
            "AS_NEEDED",
          ]),
        },
        privacy: {
          data_sharing: fakeBooleanWeighted(15),
          third_party_marketing: fakeBooleanWeighted(10),
          analytics_tracking: fakeBooleanWeighted(55),
          location_services: fakeBooleanWeighted(65),
          cookies: fakeBooleanWeighted(70),
          personalization: fakeBooleanWeighted(80),
          credit_monitoring: fakeBooleanWeighted(85),
        },
        security: {
          two_factor_auth: fakeBooleanWeighted(85),
          biometric_login: fakeBooleanWeighted(70),
          login_notifications: fakeBooleanWeighted(95),
          suspicious_activity_alerts: fakeBooleanWeighted(98),
          device_registration: fakeBooleanWeighted(75),
          session_timeout: fakeValueFromList([
            "15_MIN",
            "30_MIN",
            "1_HOUR",
            "2_HOURS",
            "4_HOURS",
          ]),
          password_complexity: fakeValueFromList([
            "BASIC",
            "MEDIUM",
            "HIGH",
            "MAXIMUM",
          ]),
        },
        account_settings: {
          statement_delivery: fakeValueFromList([
            "ELECTRONIC",
            "PAPER",
            "BOTH",
          ]),
          statement_frequency: fakeValueFromList([
            "MONTHLY",
            "QUARTERLY",
            "ANNUALLY",
          ]),
          overdraft_protection: fakeBoolean(),
          automatic_savings: fakeBoolean(),
          bill_pay_notifications: fakeBoolean(),
          low_balance_alerts: fakeBoolean(),
          large_transaction_alerts: fakeBoolean(),
          travel_notifications: fakeBoolean(),
        },
      },
    },
  },
];
